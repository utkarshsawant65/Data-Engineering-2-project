# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13MjwToZo080cZhWeooUgahzPNivRMwLC
"""

import json
import requests
import schedule
import threading
import time

# URL of NextBike API
url = 'https://api.nextbike.net/maps/nextbike-live.json'

def fetch_and_save_data():
    """Fetch data from NextBike API and save to a JSON file."""
    # Make a GET request to the NextBike API
    response = requests.get(url)

    # Check if the request was successful
    if response.status_code == 200:
        data = response.json()

        # Save the data to a JSON file
        with open('nextbike_data.json', 'w') as f:
            for country in data['countries']:
                for city in country['cities']:
                    for station in city['places']:
                        json.dump({
                            'country': country.get('country'),
                            'city': city.get('name'),
                            'geopunkt': station.get('position'),
                            'place_type': station.get('type'),
                            'lat': station.get('lat'),
                            'bikes': station.get('bikes'),
                            'uid': station.get('uid'),
                            'bike_types': station.get('bike_types'),
                            'booked_bikes': station.get('booked_bikes'),
                            'bikes_available_to_rent': station.get('bikes_available_to_rent'),
                            'terminal_type': station.get('terminal_type'),
                            'name': station.get('name'),
                            'free_racks': station.get('free_racks'),
                            'bike_numbers': station.get('bike_numbers'),
                            'bike': station.get('bike'),
                            'lng': station.get('lng'),
                            'spot': station.get('spot'),
                            'bike_racks': station.get('bike_racks'),
                            'number': station.get('number'),
                        }, f)
                        f.write('\n')

        print("Data fetched and saved to 'nextbike_data.json'")
    else:
        print(f"Request failed with status code {response.status_code}")

# Create a global flag for the running state of the loop
running = True

# Define stop function to listen to user input
def stop():
    global running
    while running:
        stop_input = input()
        if stop_input.lower() == 's':
            print('Stopping gracefully...')
            running = False

# Start stop function in a separate thread
stop_thread = threading.Thread(target=stop)
stop_thread.start()

# Schedule the job to be run every minute
schedule.every(1).minutes.do(fetch_and_save_data)

while running:
    # Run pending jobs
    schedule.run_pending()
    time.sleep(1)